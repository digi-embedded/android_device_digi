#
# U-Boot script for installing Android images from the SD card into the eMMC
#

echo "############################################################"
echo "#          Android firmware install from micro SD          #"
echo "############################################################"
echo ""
echo " This process will erase your eMMC and will install a new"
echo " U-Boot and Android firmware images on the eMMC."
echo ""
echo " Press CTRL+C now if you wish to abort or wait 10 seconds"
echo " to continue."

sleep 10
if test $? -eq 1; then
	echo "Aborted by user.";
	exit;
fi

# Determine U-Boot file to program basing on module variant
if test -n "${module_variant}"; then
	if test "${module_variant}" = "0x02" || test "${module_variant}" = "0x03"; then
		setenv INSTALL_UBOOT_FILENAME u-boot-ccimx8xsbcpro2GB-flash.imx;
	fi
fi
if test -z "${INSTALL_UBOOT_FILENAME}"; then
	echo "";
	echo "[ERROR] Cannot determine U-Boot file for this module!";
	echo "";
	echo "1. Set variable 'INSTALL_UBOOT_FILENAME' depending on your ConnectCore 8X variant:";
	echo "   - For a CPU with 2GB DDR3, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME u-boot-ccimx8xsbcpro2GB-flash.imx";
	echo "";
	echo "2. Run the install script again.";
	echo "";
	echo "Aborted";
	echo "";
	exit;
fi;

# Check for presence of firmware files on the SD card
for img_file in ${INSTALL_UBOOT_FILENAME} boot.img recovery.img system.img vendor.img; do
	if test ! -e mmc 1:1 ${img_file}; then
		echo "ERROR: Could not find file ${img_file}";
		install_abort=1;
	fi;
done
if test -n "${install_abort}"; then
	echo "Aborted.";
	exit;
fi

# Skip user confirmation for U-Boot update
setenv forced_update 1

# Set bootdelay to zero so that firmware update is run immediately after
# the first reset.
setenv bootdelay 0

# Set target MMC device index to eMMC
setenv mmcdev 0

# Update U-Boot
echo ""
echo ""
echo ">> Installing U-Boot boot loader (target will reset)"
echo ""
echo ""
update uboot mmc 1 fat ${INSTALL_UBOOT_FILENAME}
if test $? -eq 1; then
	echo "[ERROR] Failed to update U-Boot boot loader!";
	echo "";
	echo "Aborted.";
	exit;
fi

# Set 'bootcmd' to the second part of the script that will
#  - Reset environment to defaults
#  - Save the environment
#  - Partition the eMMC user data area for Android
#  - Update all the partitions:
#      - boot
#      - system
#      - recovery
#      - vendor
#  - Boot into recovery mode to wipe data and cache partitions.
setenv bootcmd '
	env default -a;
	setenv bootcmd "
		env default bootcmd;
		setenv recovery_command 'recovery --wipe_data';
		saveenv;
		run recoverycmd;
	";
	saveenv;
	setenv mmcdev 0;
	echo "";
	echo "";
	echo ">> Creating Android partition table on the eMMC";
	echo "";
	echo "";
	run partition_mmc_android;
	if test $? -eq 1; then
		echo "[ERROR] Failed to create Android partition table!";
		echo "";
		echo "Aborted.";
		exit;
	fi;
	echo "";
	echo "";
	echo ">> Installing Android boot image";
	echo "";
	echo "";
	update boot mmc 1 fat boot.img;
	if test $? -eq 1; then
		echo "[ERROR] Failed to update boot partition!";
		echo "";
		echo "Aborted.";
		exit;
	fi;
	echo "";
	echo "";
	echo ">> Installing Android recovery image";
	echo "";
	echo "";
	update recovery mmc 1 fat recovery.img;
	if test $? -eq 1; then
		echo "[ERROR] Failed to update recovery partition!";
		echo "";
		echo "Aborted.";
		exit;
	fi;
	echo "";
	echo "";
	echo ">> Installing Android system image";
	echo "";
	echo "";
	update system mmc 1 fat system.img;
	if test $? -eq 1; then
		echo "[ERROR] Failed to update system partition!";
		echo "";
		echo "Aborted.";
		exit;
	fi;
	echo "";
	echo "";
	echo ">> Installing Android vendor image";
	echo "";
	echo "";
	update vendor mmc 1 fat vendor.img;
	if test $? -eq 1; then
		echo "[ERROR] Failed to update vendor partition!";
		echo "";
		echo "Aborted.";
		exit;
	fi;
	echo "";
	echo "#######################";
	echo "#  Install complete!  #";
	echo "#######################";
	echo "";
	sleep 1;
	echo ">> Restarting the system";
	sleep 1;
	reset;
'
saveenv
reset
