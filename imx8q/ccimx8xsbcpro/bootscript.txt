#
# U-Boot bootscript for EMMC images created by Android.
#

#
# Set device tree filename depending on the board ID (if defined)
#
if test -n "${board_id}"; then
	setenv fdt_file ccimx8qxp-sbc-pro-id${board_id}.dtb
else
	#
	# Set device tree filename depending on the hardware capabilities
	#
	if test -n "${module_ram}"; then
		setexpr module_has_wifi ${hwid_3} \& 1
		setexpr module_has_bt ${hwid_3} \& 2
		setexpr module_has_bt ${module_has_bt} / 2

		if test "${module_has_wifi}" = "1" &&
		   test "${module_has_bt}" = "1"; then
			setenv fdt_file ccimx8qxp-sbc-pro-wb.dtb
		else
			setenv fdt_file ccimx8qxp-sbc-pro.dtb
		fi
	else
		#
		# Set device tree filename depending on the hardware variant
		#
		if test "${module_variant}" = "0x01"; then
			setenv fdt_file ccimx8qxp-sbc-pro-wb.dtb
		elif test "${module_variant}" = "0x02"; then
			setenv fdt_file ccimx8qxp-sbc-pro-wb.dtb
		elif test "${module_variant}" = "0x03"; then
			setenv fdt_file ccimx8qxp-sbc-pro.dtb
		elif test "${module_variant}" = "0x04"; then
			setenv fdt_file ccimx8qxp-sbc-pro-wb.dtb
		elif test "${module_variant}" = "0x05"; then
			setenv fdt_file ccimx8qxp-sbc-pro.dtb
		else
			setenv fdt_file ccimx8qxp-sbc-pro-wb.dtb
		fi
	fi
fi

#
# Configure filename for the rest of the artifacts
#
setenv imagegz Image.gz
setenv dboot_kernel_var imagegz
if itest.s "x1" == "x${mmcpart}" ; then
	setenv initrd_file uramdisk.img
elif itest.s "x2" == "x${mmcpart}" ; then
	setenv initrd_file uramdisk-recovery.img
fi

#
# Configure android bootargs
#
# NOT YET IMPLEMENTED (BOOTLOADER??)
#   androidboot.boottime=1BLL:0,1BLE:20874,KL:0,KD:0,AVB:2690,ODT:0,SW:0
#
# Initialize with MEK hardcoded bootargs
setenv bootargs_android init=/init androidboot.fbTileSupport=enable androidboot.primary_display=imx-drm
setenv bootargs_android ${bootargs_android} firmware_class.path=/vendor/firmware transparent_hugepage=never
# Complete bootargs
setenv bootargs_android ${bootargs_android} androidboot.console=${console} rootwait androidboot.hardware=digi
setenv bootargs_android ${bootargs_android} androidboot.soc_type=imx8qxp androidboot.btmacaddr=${btaddr}
setenv bootargs_android ${bootargs_android} androidboot.bootreason=reboot

# Trusty OS (https://source.android.com/security/trusty)
if itest.s "xtrusty" != "x${keystore}"; then
	keystore="software"
else
	keystore="trusty"
fi
setenv bootargs_android ${bootargs_android} androidboot.keystore=${keystore}

# Bootdevice (emmc, sd) and storage_type (needed by the "first stage mount" init)
if itest.s "x0" == "x${mmcbootdev}"; then
	bootdev="5b010000.usdhc"
	storage_type="emmc"
elif itest.s "x1" == "x${mmcbootdev}"; then
	bootdev="5b020000.usdhc"
	storage_type="sd"
fi
setenv bootargs_android ${bootargs_android} androidboot.bootdevice=${bootdev} androidboot.storage_type=${storage_type}

# Country code
if itest.s "x" == "x${wificountrycode}"; then
	wificountrycode="US"
fi
setenv bootargs_android ${bootargs_android} androidboot.wificountrycode=${wificountrycode}

# Serial Number (Year-Month-Serial: MAC1_ADDR[29:0])
if itest.s "x" != "x${hwid_0}"; then
	setexpr serialno ${hwid_0} \& 0x3FFFFFFF
	setenv bootargs_android ${bootargs_android} androidboot.serialno=${serialno}
else
	echo ""
	echo "*********************************************************************"
	echo "* Warning: OTP data not found. Android serial number not configured *"
	echo "*********************************************************************"
	echo ""
fi

# Contiguous memory allocation
if itest.s "x" == "x$cma" ; then
	cma=800M@0x960M-0xe00M
fi
setenv bootargs_android $bootargs_android cma=$cma

#
# Boot
#
setenv boot_initrd true
dboot android mmc ${mmcbootdev}:${mmcpart}
