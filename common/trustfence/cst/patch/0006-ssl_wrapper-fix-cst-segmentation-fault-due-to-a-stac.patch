From: Javier Viguera <javier.viguera@digi.com>
Date: Tue, 8 Sep 2020 13:47:51 +0200
Subject: [PATCH] ssl_wrapper: fix cst segmentation fault due to a stack
 overflow

See:

https://community.nxp.com/t5/i-MX-Processors/CST-Segfault-while-Encrypting-Large-Image/m-p/848824

Signed-off-by: Javier Viguera <javier.viguera@digi.com>
---
 code/back_end/src/ssl_wrapper.c | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/code/back_end/src/ssl_wrapper.c b/code/back_end/src/ssl_wrapper.c
index 6cd69b272c3d..c4e59f7086e5 100644
--- a/code/back_end/src/ssl_wrapper.c
+++ b/code/back_end/src/ssl_wrapper.c
@@ -63,7 +63,13 @@ int32_t encryptccm(unsigned char *plaintext, int plaintext_len, unsigned char *a
     int len;
     int ciphertext_len;
 
-    unsigned char ciphertext[plaintext_len + EVP_MAX_BLOCK_LENGTH] ;
+    unsigned char *ciphertext = NULL;
+    ciphertext = (unsigned char *)malloc(plaintext_len + EVP_MAX_BLOCK_LENGTH);
+    if (NULL == ciphertext) {
+        handle_errors("Failed to allocate memory for encrypted data",
+                      err_value, err_str);
+        return *err_value;
+    }
 
     FILE *fho = NULL;
     int err = 0;
@@ -89,6 +95,7 @@ int32_t encryptccm(unsigned char *plaintext, int plaintext_len, unsigned char *a
             default:
                 handle_errors("Failed to allocate ccm context structure",
                               err_value, err_str);
+                free(ciphertext);
                 return *err_value;
         }
 
@@ -170,6 +177,8 @@ int32_t encryptccm(unsigned char *plaintext, int plaintext_len, unsigned char *a
         fclose(fho);
     }
 
+    free(ciphertext);
+
     return *err_value;
 #endif
 }
